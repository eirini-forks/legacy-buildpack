#!/usr/bin/env bash
set -eo pipefail

DIR=$(dirname "$0")
layersdir=$1

# create build cache layer - copying to /tmp filesystem to avoid
# cross-filesystem linking issues
buildCacheLayer="$layersdir/buildcache"
mkdir -p "$buildCacheLayer"
echo "cache = true" >$buildCacheLayer.toml
cp -a "$buildCacheLayer" /tmp/cache

# copy app to /tmp filesystem to avoid linking issues
cp -a . "/tmp/app"

# invoke legacy builder
CF_STACK=cflinuxfs3 \
  "$DIR/../lifecycle/builder" \
  -buildDir /tmp/app \
  -buildArtifactsCacheDir /tmp/cache \
  -buildpackOrder https://github.com/cloudfoundry/ruby-buildpack/releases/download/v1.8.27/ruby-buildpack-cflinuxfs3-v1.8.27.zip,https://github.com/cloudfoundry/nodejs-buildpack/releases/download/v1.7.41/nodejs-buildpack-cflinuxfs3-v1.7.41.zip,https://github.com/cloudfoundry/go-buildpack/releases/download/v1.9.25/go-buildpack-cflinuxfs3-v1.9.25.zip
# -buildpackOrder "file://$DIR/../buildpacks/ruby"

# replace buildcache layer with current /tmp/cache contents
rm -rf "$buildCacheLayer"
cp -a /tmp/cache $buildCacheLayer

# extract droplet to layer temporarily to avoid tar complaining about setgid bits
dropletLayer="$layersdir/droplet"
mkdir -p "$dropletLayer"
tar xf /tmp/droplet -C "$dropletLayer"

cat >"$PWD/.profile" <<EOL
export DEPS_DIR=/workspace/deps
export HOME=/workspace/app
export PATH=\$PATH:/workspace/app/bin

cd \$HOME

if [ -n "\$(ls ../profile.d/* 2>/dev/null)" ]; then
  for env_file in ../profile.d/*; do
    source \$env_file
  done
fi

if [ -n "\$(ls .profile.d/* 2>/dev/null)" ]; then
  for env_file in .profile.d/*; do
    source \$env_file
  done
fi
EOL

# clean working dir and copy droplet layer in, losing strange perms in the process
rm -rf $PWD/*
cp -a "$dropletLayer"/* .

# install legacy launcher into launcher layer
mkdir -p $layersdir/launcher/bin
cp "$DIR/../lifecycle/cf-launcher" $layersdir/launcher/bin
echo "launch = true" >$layersdir/launcher.toml

command="$(cat $PWD/app/Procfile | grep web | sed 's/web: //g')"

# configure cnb launcher
cat >"$layersdir/launch.toml" <<EOL
[[processes]]
type = "web"
command = "env; $command"
EOL
